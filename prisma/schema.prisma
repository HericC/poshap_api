// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Plan {
  key            String    @id @map("_id")
  name           String    @unique
  description    String
  monthlyPrice   Float
  quarterlyPrice Float
  semesterPrice  Float
  users          User[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deletedAt      DateTime?

  @@map("plan")
}

model User {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String           @unique
  phone                 String
  password              String
  planKey               String
  planDate              DateTime
  blockDate             DateTime?
  forgotPasswordOtgCode String?          @unique
  forgotPasswordExpires DateTime?
  plan                  Plan             @relation(fields: [planKey], references: [key])
  providerRatings       ProviderRating[]
  clientRatings         ClientRating[]
  services              Service[]
  ordersProvider        Order[]          @relation(name: "ordersProvider")
  ordersClient          Order[]          @relation(name: "ordersClient")
  ongoingProvider       Ongoing[]        @relation(name: "ongoingProvider")
  ongoingClient         Ongoing[]        @relation(name: "ongoingClient")
  ongoingCanceled       Ongoing[]        @relation(name: "ongoingCanceled")
  accusationsAccused    Accusation[]     @relation(name: "accusationsAccused")
  accusationsAccuser    Accusation[]     @relation(name: "accusationsAccuser")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @default(now()) @updatedAt
  deletedAt             DateTime?

  @@map("user")
}

model Accusation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  accusedId   String    @unique @db.ObjectId
  accuserId   String    @unique @db.ObjectId
  accused     User      @relation(fields: [accusedId], references: [id], name: "accusationsAccused")
  accuser     User      @relation(fields: [accuserId], references: [id], name: "accusationsAccuser")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?

  @@map("accusation")
}

model ProviderRating {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  providerRating Int
  serviceRating  Int
  providerNote   String?
  serviceNote    String?
  userId         String    @db.ObjectId
  user           User      @relation(fields: [userId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deletedAt      DateTime?

  @@map("providerrating")
}

model ClientRating {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  note      String?
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@map("clientrating")
}

model Service {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  category    String
  price       Float
  description String?
  scheduling  Boolean   @default(false)
  priority    Boolean   @default(false)
  providerId  String    @db.ObjectId
  provider    User      @relation(fields: [providerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?

  @@map("service")
}

model Order {
  id                                       String    @id @default(auto()) @map("_id") @db.ObjectId
  category                                 String
  price                                    Float
  description                              String?
  schedulingDate                           DateTime?
  clientFirstSchedulingConfirmationDate    DateTime?
  clientSecondSchedulingConfirmationDate   DateTime?
  providerFirstSchedulingConfirmationDate  DateTime?
  providerSecondSchedulingConfirmationDate DateTime?
  providerId                               String    @db.ObjectId
  clientId                                 String    @db.ObjectId
  provider                                 User      @relation(fields: [providerId], references: [id], name: "ordersProvider")
  client                                   User      @relation(fields: [clientId], references: [id], name: "ordersClient")
  createdAt                                DateTime  @default(now())
  updatedAt                                DateTime  @default(now()) @updatedAt
  deletedAt                                DateTime?

  @@map("order")
}

model Ongoing {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  category       String
  price          Float
  description    String?
  finishedDate   DateTime?
  canceledDate   DateTime?
  providerId     String    @db.ObjectId
  clientId       String    @db.ObjectId
  canceledUserId String?   @db.ObjectId
  provider       User      @relation(fields: [providerId], references: [id], name: "ongoingProvider")
  client         User      @relation(fields: [clientId], references: [id], name: "ongoingClient")
  canceledUser   User?     @relation(fields: [providerId], references: [id], name: "ongoingCanceled")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deletedAt      DateTime?

  @@map("ongoing")
}
